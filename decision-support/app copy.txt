// ==========================================================================
// HNZ Liver Imaging Decision Support Tool
// ==========================================================================

class LiverImagingTool {
  constructor() {
    this.currentStep = 'start';
    this.stepHistory = ['start'];
    this.answers = {};
    this.recommendation = null;
    
    this.init();
  }

  init() {
    this.bindEvents();
    this.renderStep();
  }

  bindEvents() {
    // Protocol modal events
    document.addEventListener('click', (e) => {
      if (e.target.id === 'protocolReference' || e.target.closest('#protocolReference')) {
        this.showProtocolModal();
      }
      if (e.target.id === 'closeProtocol') {
        this.hideProtocolModal();
      }
      if (e.target.id === 'protocolModal') {
        this.hideProtocolModal();
      }
    });

    // Escape key to close modal
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        this.hideProtocolModal();
      }
    });
  }

  showProtocolModal() {
    document.getElementById('protocolModal').classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  hideProtocolModal() {
    document.getElementById('protocolModal').classList.add('hidden');
    document.body.style.overflow = 'auto';
  }

  resetTool() {
    this.currentStep = 'start';
    this.stepHistory = ['start'];
    this.answers = {};
    this.recommendation = null;
    this.renderStep();
  }

  goBack() {
    if (this.stepHistory.length > 1) {
      this.stepHistory.pop();
      const previousStep = this.stepHistory[this.stepHistory.length - 1];
      this.currentStep = previousStep;
      this.recommendation = null;
      this.renderStep();
    }
  }

  handleAnswer(step, answer, nextStep, rec = null) {
    this.answers[step] = answer;
    if (rec) {
      this.recommendation = rec;
      this.currentStep = 'result';
      this.stepHistory.push('result');
    } else {
      this.currentStep = nextStep;
      this.stepHistory.push(nextStep);
    }
    this.renderStep();
  }

  createButton(text, onClick, variant = 'primary', icon = null, className = '') {
    const button = document.createElement('button');
    button.className = `decision-button ${variant} ${className}`;
    button.onclick = onClick;
    
    if (icon) {
      const iconSpan = document.createElement('span');
      iconSpan.innerHTML = icon;
      iconSpan.className = 'button-icon';
      button.appendChild(iconSpan);
    }
    
    const textSpan = document.createElement('span');
    textSpan.textContent = text;
    button.appendChild(textSpan);
    
    return button;
  }

  createProtocolReferenceButton() {
    return this.createButton(
      'View Protocol Reference Guide',
      () => this.showProtocolModal(),
      'protocol-reference',
      null,
      'full-width'
    );
  }

  createBackButton() {
    if (this.stepHistory.length > 1) {
      return this.createButton(
        'Back',
        () => this.goBack(),
        'secondary',
        '←',
        'small'
      );
    }
    return null;
  }

  createResetButton() {
    return this.createButton(
      'Start Over',
      () => this.resetTool(),
      'secondary',
      '↻',
      'small'
    );
  }

  createNavigationContainer() {
    const navContainer = document.createElement('div');
    navContainer.className = 'external-navigation-controls';
    
    if (this.currentStep === 'result') {
      // Special handling for result step
      const backBtn = this.createBackButton();
      if (backBtn) {
        navContainer.appendChild(backBtn);
      }
      
      const newAssessmentBtn = this.createButton(
        'Start New Assessment',
        () => {
          this.resetTool();
        },
        'primary',
        '↻',
        'small'
      );
      navContainer.appendChild(newAssessmentBtn);
    } else {
      // Regular navigation for other steps
      const backBtn = this.createBackButton();
      if (backBtn) {
        navContainer.appendChild(backBtn);
      }
      
      const resetBtn = this.createResetButton();
      navContainer.appendChild(resetBtn);
    }
    
    return navContainer;
  }

  createProtocolInfo(title, description, note = null) {
    const container = document.createElement('div');
    container.className = 'protocol-info';
    
    const titleEl = document.createElement('h4');
    titleEl.textContent = title;
    container.appendChild(titleEl);
    
    const descEl = document.createElement('p');
    descEl.textContent = description;
    container.appendChild(descEl);
    
    if (note) {
      const noteEl = document.createElement('div');
      noteEl.className = 'protocol-note';
      const noteP = document.createElement('p');
      noteP.innerHTML = `<strong>Note:</strong> ${note}`;
      noteEl.appendChild(noteP);
      container.appendChild(noteEl);
    }
    
    return container;
  }

  createRecommendationCard(rec) {
    const container = document.createElement('div');
    container.className = 'recommendation-card';
    
    const header = document.createElement('div');
    header.className = 'recommendation-header';
    
    const icon = document.createElement('span');
    icon.className = 'recommendation-icon';
    icon.innerHTML = '✓';
    
    const title = document.createElement('h3');
    title.className = 'recommendation-title';
    title.textContent = 'Recommended Imaging';
    
    header.appendChild(icon);
    header.appendChild(title);
    container.appendChild(header);
    
    const details = document.createElement('div');
    details.className = 'recommendation-details';
    
    const modalityDetail = document.createElement('div');
    modalityDetail.className = 'recommendation-detail';
    modalityDetail.innerHTML = '<strong>Modality:</strong> <span>' + rec.modality + '</span>';
    
    const contrastDetail = document.createElement('div');
    contrastDetail.className = 'recommendation-detail';
    contrastDetail.innerHTML = '<strong>Contrast:</strong> <span>' + rec.contrast + '</span>';
    
    details.appendChild(modalityDetail);
    details.appendChild(contrastDetail);
    
    if (rec.notes) {
      const notesDetail = document.createElement('div');
      notesDetail.className = 'recommendation-detail';
      notesDetail.innerHTML = '<strong>Notes:</strong> <span>' + rec.notes + '</span>';
      details.appendChild(notesDetail);
    }
    
    container.appendChild(details);
    return container;
  }

  renderStep() {
    const content = document.getElementById('appContent');
    content.innerHTML = '';
    
    // Add protocol reference at the top for all steps except result
    if (this.currentStep !== 'result') {
      const protocolRef = document.createElement('div');
      protocolRef.className = 'protocol-reference-container';
      protocolRef.appendChild(this.createProtocolReferenceButton());
      content.appendChild(protocolRef);
    }
    
    const stepCard = document.createElement('div');
    stepCard.className = 'step-card';
    
    switch (this.currentStep) {
      case 'start':
        this.renderStartStep(stepCard);
        break;
      case 'under-40-branch':
        this.renderUnder40Branch(stepCard);
        break;
      case 'under-40-ct-pancreas':
        this.renderUnder40CtPancreas(stepCard);
        break;
      case 'under-40-characterization':
        this.renderUnder40Characterization(stepCard);
        break;
      case 'under-40-symptoms-decision':
        this.renderUnder40SymptomsDecision(stepCard);
        break;
      case 'under-40-ct-check':
        this.renderUnder40CtCheck(stepCard);
        break;
      case 'over-40-branch':
        this.renderOver40Branch(stepCard);
        break;
      case 'over-40-ct-pancreas':
        this.renderOver40CtPancreas(stepCard);
        break;
      case 'over-40-characterization':
        this.renderOver40Characterization(stepCard);
        break;
      case 'result':
        this.renderResult(stepCard);
        break;
    }
    
    content.appendChild(stepCard);
    
    // Add navigation controls outside the card for non-start steps
    if (this.currentStep !== 'start') {
      const navContainer = this.createNavigationContainer();
      content.appendChild(navContainer);
    }
  }

  renderStartStep(container) {
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'What is the primary clinical scenario?';
    
    const buttonGroup = document.createElement('div');
    buttonGroup.className = 'button-group';
    
    const cirrhosisBtn = this.createButton(
      'Cirrhosis or risk factors for cirrhosis and no other malignancy suspected. Outside CT or US showing liver lesion',
      () => this.handleAnswer('start', 'cirrhosis-risk', 'result', {
        modality: 'MRI liver',
        contrast: 'with Gadovist (in line with Auckland unless specified by MDM)',
        notes: 'Direct pathway for cirrhosis/risk factors with no other malignancy suspected'
      }),
      'primary'
    );
    
    const under40Btn = this.createButton(
      'Patients less than 40 years old',
      () => this.handleAnswer('start', 'under-40', 'under-40-branch'),
      'secondary'
    );
    
    const over40Btn = this.createButton(
      'Patients greater than 40 years old',
      () => this.handleAnswer('start', 'over-40', 'over-40-branch'),
      'secondary'
    );
    
    buttonGroup.appendChild(cirrhosisBtn);
    buttonGroup.appendChild(under40Btn);
    buttonGroup.appendChild(over40Btn);
    
    container.appendChild(title);
    container.appendChild(buttonGroup);
  }

  renderUnder40Branch(container) {
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'Patients Less Than 40 Years Old';
    
    
    const question = document.createElement('p');
    question.className = 'step-question';
    question.textContent = 'What was found on initial imaging?';
    
    const buttonGroup = document.createElement('div');
    buttonGroup.className = 'button-group';
    
    const incidentalBtn = this.createButton(
      'Incidentally detected liver lesions on ultrasound',
      () => this.handleAnswer('under-40-branch', 'incidental-liver', 'under-40-ct-pancreas'),
      'primary'
    );
    
    const symptomsBtn = this.createButton(
      'Symptoms or abnormal LFTs and ultrasound/CT confirms gallstones',
      () => this.handleAnswer('under-40-branch', 'symptoms-lft', 'under-40-symptoms-decision'),
      'secondary'
    );
    
    buttonGroup.appendChild(incidentalBtn);
    buttonGroup.appendChild(symptomsBtn);
    
    container.appendChild(title);
    container.appendChild(question);
    container.appendChild(buttonGroup);
  }

  renderUnder40CtPancreas(container) {
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'CT Pancreatic Mass Protocol';
    
    
    const protocolInfo = this.createProtocolInfo(
      'CT Pancreatic Mass Protocol',
      'Early arterial phase upper abdomen + portal venous phase abdomen and pelvis',
      'MRI preferred, but CT undertaken first due to MRI resource constraints'
    );
    
    const question = document.createElement('p');
    question.className = 'step-question';
    question.textContent = 'Has the CT already been completed?';
    
    const buttonRow = document.createElement('div');
    buttonRow.className = 'button-row';
    
    const yesBtn = this.createButton(
      'Yes',
      () => this.handleAnswer('under-40-ct-pancreas', 'yes', 'under-40-characterization'),
      'success'
    );
    
    const noBtn = this.createButton(
      'No',
      () => this.handleAnswer('under-40-ct-pancreas', 'no', 'result', {
        modality: 'CT Pancreatic Mass Protocol',
        contrast: 'Early arterial phase upper abdomen + portal venous phase abdomen and pelvis',
        notes: ''
      }),
      'warning'
    );
    
    buttonRow.appendChild(yesBtn);
    buttonRow.appendChild(noBtn);
    
    container.appendChild(title);
    container.appendChild(protocolInfo);
    container.appendChild(question);
    container.appendChild(buttonRow);
  }

  renderUnder40Characterization(container) {
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'Pancreatic CT Completed';
    
    
    const question = document.createElement('p');
    question.className = 'step-question';
    question.textContent = 'Is further characterisation or assessment required?';
    
    const buttonRow = document.createElement('div');
    buttonRow.className = 'button-row';
    
    const yesBtn = this.createButton(
      'Yes',
      () => this.handleAnswer('under-40-characterization', 'yes', 'result', {
        modality: 'MRCP/MRI liver/pancreas',
        contrast: 'with Gadolinium (see protocol reference for contrast selection)',
        notes: ''
      }),
      'success'
    );
    
    buttonRow.appendChild(yesBtn);
    
    container.appendChild(title);
    container.appendChild(question);
    container.appendChild(buttonRow);
  }

  renderUnder40SymptomsDecision(container) {
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'Patient < 40 symptoms or proven gallstones';
    
    
    const question = document.createElement('p');
    question.className = 'step-question';
    question.textContent = '?CBD stone is the only question';
    
    const buttonRow = document.createElement('div');
    buttonRow.className = 'button-row';
    
    const yesBtn = this.createButton(
      'Yes',
      () => this.handleAnswer('under-40-symptoms-decision', 'yes', 'result', {
        modality: 'MRCP',
        contrast: '(CT not required)',
        notes: ''
      }),
      'success'
    );
    
    const noBtn = this.createButton(
      'No',
      () => this.handleAnswer('under-40-symptoms-decision', 'no', 'under-40-ct-check'),
      'warning'
    );
    
    buttonRow.appendChild(yesBtn);
    buttonRow.appendChild(noBtn);
    
    container.appendChild(title);
    container.appendChild(question);
    container.appendChild(buttonRow);
  }

  renderUnder40CtCheck(container) {
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'CT Pancreatic Mass Protocol';
    
    
    const protocolInfo = this.createProtocolInfo(
      'CT Pancreatic Mass Protocol',
      'Early arterial phase upper abdomen + portal venous phase abdomen and pelvis'
    );
    
    const question = document.createElement('p');
    question.className = 'step-question';
    question.textContent = 'Has the CT already been completed and there is still diagnostic uncertainty?';
    
    const buttonRow = document.createElement('div');
    buttonRow.className = 'button-row';
    
    const yesBtn = this.createButton(
      'Yes',
      () => this.handleAnswer('under-40-ct-check', 'yes', 'result', {
        modality: 'MRCP/MRI liver/pancreas',
        contrast: 'with Gadolinium (see protocol reference for contrast selection)',
        notes: ''
      }),
      'success'
    );
    
    buttonRow.appendChild(yesBtn);
    
    container.appendChild(title);
    container.appendChild(protocolInfo);
    container.appendChild(question);
    container.appendChild(buttonRow);
  }

  renderOver40Branch(container) {
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'Patients Greater Than 40 Years Old';
    
    
    const question = document.createElement('p');
    question.className = 'step-question';
    question.textContent = 'What clinical scenario applies?';
    
    const buttonGroup = document.createElement('div');
    buttonGroup.className = 'button-group';
    
    const newLesionsBtn = this.createButton(
      'Incidentally detected new/concerning liver lesions on ultrasound',
      () => this.handleAnswer('over-40-branch', 'new-lesions', 'over-40-ct-pancreas'),
      'primary'
    );
    
    const abdominalBtn = this.createButton(
      'Abdominal ultrasound for abnormal LFTs. Question is ?gallstone or pancreaticobiliary pathology',
      () => this.handleAnswer('over-40-branch', 'abdominal-lft', 'over-40-ct-pancreas'),
      'secondary'
    );
    
    buttonGroup.appendChild(newLesionsBtn);
    buttonGroup.appendChild(abdominalBtn);
    
    container.appendChild(title);
    container.appendChild(question);
    container.appendChild(buttonGroup);
  }

  renderOver40CtPancreas(container) {
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'CT Pancreatic Mass Protocol';
    
    
    const protocolInfo = this.createProtocolInfo(
      'CT Pancreatic Mass Protocol',
      'Early arterial phase upper abdomen + portal venous phase abdomen and pelvis'
    );
    
    const question = document.createElement('p');
    question.className = 'step-question';
    question.textContent = 'Has the CT already been completed?';
    
    const buttonRow = document.createElement('div');
    buttonRow.className = 'button-row';
    
    const yesBtn = this.createButton(
      'Yes',
      () => this.handleAnswer('over-40-ct-pancreas', 'yes', 'over-40-characterization'),
      'success'
    );
    
    const noBtn = this.createButton(
      'No',
      () => this.handleAnswer('over-40-ct-pancreas', 'no', 'result', {
        modality: 'CT Pancreatic Mass Protocol',
        contrast: 'Early arterial phase upper abdomen + portal venous phase abdomen and pelvis',
        notes: ''
      }),
      'warning'
    );
    
    buttonRow.appendChild(yesBtn);
    buttonRow.appendChild(noBtn);
    
    container.appendChild(title);
    container.appendChild(protocolInfo);
    container.appendChild(question);
    container.appendChild(buttonRow);
  }

  renderOver40Characterization(container) {
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'Pancreatic CT Completed';
    
    
    const question = document.createElement('p');
    question.className = 'step-question';
    question.textContent = 'Is further characterisation or assessment required?';
    
    const buttonRow = document.createElement('div');
    buttonRow.className = 'button-row';
    
    const yesBtn = this.createButton(
      'Yes',
      () => this.handleAnswer('over-40-characterization', 'yes', 'result', {
        modality: 'MRCP/MRI liver/pancreas',
        contrast: 'with Gadolinium (see protocol reference for contrast selection)',
        notes: ''
      }),
      'success'
    );
    
    buttonRow.appendChild(yesBtn);
    
    container.appendChild(title);
    container.appendChild(question);
    container.appendChild(buttonRow);
  }

  renderResult(container) {
    // Change card background for result page
    container.style.background = 'linear-gradient(135deg, #ECFDF5 0%, #EBF8FF 100%)';
    
    const title = document.createElement('h2');
    title.className = 'step-title';
    title.textContent = 'Imaging Recommendation';
    
    
    const recommendationCard = this.createRecommendationCard(this.recommendation);
    
    container.appendChild(title);
    container.appendChild(recommendationCard);
  }
}

// Initialize the application when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new LiverImagingTool();
});